# To debug a workflow see: https://docs.github.com/en/actions/configuring-and-managing-workflows/managing-a-workflow-run#enabling-debug-logging

name: C++ CI

on: 
  push:
  schedule:
    - cron: '0 2 * * SAT'

jobs:
  build-unix:

    runs-on: ${{ matrix.os }}
    container: ${{ matrix.container }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # seen at 20210531 in https://github.com/actions/virtual-environments/blob/main/images/linux/Ubuntu2004-README.md
          # - name: Ubuntu GCC 11
          #   os: ubuntu-20.04
          #   c-compiler: gcc-11
          #   cxx-compiler: g++-11
          - name: Ubuntu GCC 10
            os: ubuntu-20.04
            c-compiler: gcc-10
            cxx-compiler: g++-10
          - name: Ubuntu GCC 9
            os: ubuntu-20.04
            c-compiler: gcc-9
            cxx-compiler: g++-9
          - name: Ubuntu Clang 10
            os: ubuntu-20.04
            c-compiler: clang-10
            cxx-compiler: clang++-10
          - name: Ubuntu Clang 11
            os: ubuntu-20.04
            c-compiler: clang-11
            cxx-compiler: clang++-11
          # - name: Ubuntu Clang 12
          #  os: ubuntu-20.04
          #  c-compiler: clang-12
          #  cxx-compiler: clang++-12
          - name: macOS 10.15 Apple Clang
            os: macOS-10.15
          # - name: macOS 10.15 Clang 12
          #  os: macOS-10.15
          #  c-compiler: clang-12
          #  cxx-compiler: clang++-12
          ## macOS-11 not yet publicly available
          # - name: macOS 11
          #   os: macOS-11
          #   compiler: # default

          # - name: NVidia HPC 20.11
          #   os: ubuntu-20.04
          #   c-compiler: nvc
          #   cxx-compiler: nvc++
          #   # for C++20 requires â‰¥21.1; check 
          #   # * https://ngc.nvidia.com/catalog/containers/nvidia:nvhpc
          #   # * https://developer.nvidia.com/nvidia-hpc-sdk-downloads
          #   container: nvcr.io/nvidia/nvhpc:20.11-devel-cuda_multi-ubuntu20.04 # C++17 support 

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          submodules: true
      - name: install
        run: |
          sudo apt update && sudo apt install -y clang-11 libc++-11-dev libc++abi-11-dev
        if: matrix.c-compiler == 'clang-11' && runner.os == 'Linux'
      - name: install
        run: |
          sudo apt update && sudo apt install -y clang-12
        if: matrix.c-compiler == 'clang-12' && runner.os == 'Linux'
      - name: configure
        run: |
          echo "Configure on $(uname -a)"
          mkdir build && cd build && CC="${{matrix.c-compiler}}" CXX="${{matrix.cxx-compiler}}" cmake ..
      - name: build
        run: cmake --build build
      - name: test
        run: cd build && ctest --output-on-failure
      - name: show unsupported examples
        run: cat build/unsupported_examples.md 2>/dev/null || true

  build-windows:

    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ windows-latest ]

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - name: configure
        run: mkdir build && cd build && cmake ..
      - name: build
        run: cmake --build build --config Debug
      - name: test
        run: cd build && ctest -C Debug --timeout 5 --output-on-failure
      - name: show unsupported examples
        shell: bash
        run: cat build/unsupported_examples.md 2>/dev/null || true
